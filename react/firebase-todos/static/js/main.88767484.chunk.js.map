{"version":3,"sources":["components/navbar.jsx","components/form.jsx","components/todo-list.jsx","config.js","app.jsx","serviceWorker.js","index.js"],"names":["Navbar","this","props","appTitle","user","signInWithGoogle","signOut","className","icon","faStream","displayName","onClick","Component","Form","state","value","input","React","createRef","event","setState","target","app","onInsert","bind","doPropsOnInsert","current","focus","preventDefault","onSubmit","handleSubmit","type","placeholder","onChange","handleValue","ref","alert","SortableItem","SortableElement","indexToHandle","todo","onDelete","onCheck","statusAfterClick","checked","faGripVertical","faCheck","faTrashAlt","SortableList","SortableContainer","todos","map","index","key","TodoList","onSort","onSortEnd","config","loadingMessage","noDataMessage","errorFirebaseMessage","defaultData","id","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","isLoggedIn","firestoreData","db","firebaseApp","firestore","todosRef","collection","prevProps","prevState","userKey","email","doc","get","then","data","JSON","parse","content","length","dataToInsert","stringify","currentDate","getCurrentDate","pushToFirestore","createdAt","updatedAt","catch","error","prevContent","set","console","log","Date","getDate","getMonth","getFullYear","dataToHandle","generateRamdomId","concat","filter","item","sortedAttributes","oldIndex","newIndex","arrayMove","Math","random","toString","substr","Fragment","handleInsert","handleDelete","handleCheck","handleSort","firebaseAppAuth","auth","providers","googleProvider","GoogleAuthProvider","withFirebaseAuth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88767484.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faStream } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Navbar extends Component {\r\n\trender() {\r\n\t\tconst { appTitle, user, signInWithGoogle, signOut } = this.props;\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<nav className=\"navbar navbar-light bg-light\">\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div className=\"col-md-8 offset-md-2\">\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t\t\t<span className=\"navbar-brand mb-0 h1\">\r\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={ faStream } />\r\n\t\t\t\t\t\t\t\t\t<span className=\"ml-2\">{ appTitle }</span>\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</div>\t\t\t\t\t\r\n\t\t\t\t\t\t\t<div className=\"col align-self-end text-right\">\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tuser \r\n\t\t\t\t\t\t\t\t\t? <span className=\"navbar-text pr-3\">Hello, { user.displayName }</span>\r\n\t\t\t\t\t\t\t\t\t: <span className=\"navbar-text\"></span>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tuser \r\n\t\t\t\t\t\t\t\t\t? <button className=\"btn btn-dark\" onClick={ signOut }>Sign Out</button>\r\n\t\t\t\t\t\t\t\t\t: <button className=\"btn btn-dark\" onClick={ signInWithGoogle }>Sign In with Google</button>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</div>\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</nav>\t\t\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from \"react\";\r\n\r\nclass Form extends Component {\r\n\tconstructor( props ) {\r\n\t\tsuper( props );\r\n\t\t\r\n\t\t// init the state\r\n\t\tthis.state = {\r\n\t\t\tvalue: ''\r\n\t\t}\r\n\t\t\r\n\t\t// createRef for input\r\n\t\tthis.input = React.createRef();\r\n\t}\t\r\n\t\r\n\thandleValue( event ) {\r\n\t\tthis.setState( { value: event.target.value } );\r\n\t}\r\n\t\r\n\thandleSubmit( event ) {\r\n\t\tconst { app, onInsert } = this.props;\t\t\r\n\t\tconst doPropsOnInsert = onInsert.bind( app, this.state.value );\r\n\t\t\r\n\t\t// do props onInsert\r\n\t\tdoPropsOnInsert();\r\n\t\t\r\n\t\t// do empty value\r\n\t\tthis.setState({value: ''});\r\n\t\t\r\n\t\t// set cursor focus on input\r\n\t\tthis.input.current.focus();\r\n\t\t\r\n\t\t// prevent reloading after submit\r\n\t\tevent.preventDefault();\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form onSubmit={ this.handleSubmit.bind( this ) }>\r\n\t\t\t\t<div className=\"form-row\">\r\n\t\t\t\t\t<div className=\"col-10\">\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\ttype = \"text\" \r\n\t\t\t\t\t\t\tclassName = \"form-control\" \r\n\t\t\t\t\t\t\tplaceholder = \"Type your todo here\" \r\n\t\t\t\t\t\t\tvalue = { this.state.value } \r\n\t\t\t\t\t\t\tonChange = { this.handleValue.bind( this ) }\r\n\t\t\t\t\t\t\tref = {this.input}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-2\">\r\n\t\t\t\t\t\t<input type=\"submit\" value=\"INS\" className=\"btn btn-primary w-100\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{ this.props.alert && (\r\n\t\t\t\t\t<div className=\"alert alert-info mt-3\">{ this.props.alert }</div>\t\t\t\t\t\t\r\n\t\t\t\t) }\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Form;","import React, { Component } from \"react\";\r\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGripVertical, faTrashAlt, faCheck } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst SortableItem = SortableElement( ( { indexToHandle, app, todo, onDelete, onCheck } ) => {\r\n\tconst statusAfterClick = todo.checked ? false : true;\r\n\tlet className = \"alert alert-secondary bg-white todo-list-item\";\r\n\tclassName += todo.checked ? ' checked' : '';\r\n\t\r\n\treturn (\r\n\t\t<div className={ className }>\r\n\t\t\t<FontAwesomeIcon icon={ faGripVertical } className=\"list-item-grip\" />\r\n\t\t\t<span className=\"list-item-value\">{ todo.value }</span>\r\n\t\t\t<span className=\"btn-container\">\r\n\t\t\t\t<button \r\n\t\t\t\t\tclassName = \"btn btn-info btn-sm\"\r\n\t\t\t\t\tonClick = { onCheck.bind( app, indexToHandle, statusAfterClick ) }\r\n\t\t\t\t><FontAwesomeIcon icon={ faCheck } /></button>\r\n\t\t\t\t<button \r\n\t\t\t\t\tclassName = \"btn btn-danger btn-sm ml-2\"\r\n\t\t\t\t\tonClick = { onDelete.bind( app, indexToHandle ) }\r\n\t\t\t\t><FontAwesomeIcon icon={ faTrashAlt } /></button>\r\n\t\t\t</span>\r\n\t\t</div>\r\n\t)\r\n} );\r\n\r\nconst SortableList = SortableContainer( ( { app, todos, onDelete, onCheck } ) => {\r\n\treturn (\r\n\t\t<div className=\"my-3\">\r\n\t\t\t{ todos.map( ( todo, index ) => (\r\n\t\t\t\t<SortableItem \r\n\t\t\t\t\tkey = { index }\r\n\t\t\t\t\tindex = { index } // for sorting purpose\r\n\t\t\t\t\tindexToHandle = { index } // for action delete and others\r\n\t\t\t\t\tapp = { app }\r\n\t\t\t\t\ttodo = { todo }\r\n\t\t\t\t\tonDelete = { onDelete }\r\n\t\t\t\t\tonCheck = { onCheck }\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t/>\r\n\t\t\t) ) }\r\n\t\t</div>\r\n\t)\r\n} );\r\n\r\nclass TodoList extends Component {\t\r\n\trender() {\r\n\t\tconst { app, todos, onDelete, onCheck, onSort } = this.props;\r\n\t\treturn (\r\n\t\t\t<SortableList \r\n\t\t\t\tapp = { app } \r\n\t\t\t\ttodos = { todos } \r\n\t\t\t\tonDelete = { onDelete } \r\n\t\t\t\tonCheck = { onCheck } \r\n\t\t\t\tonSortEnd = { onSort.bind( app ) } \r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default TodoList;","const config = {\r\n\tappTitle: \"React-Firebase Todos\",\r\n\tloadingMessage: \"Loading data, please wait..\",\r\n\tnoDataMessage: \"You are currently have no todo item, please add a new one :)\",\r\n\terrorFirebaseMessage: \"An error encountered while fetching the Firebase data, please reload the page :(\",\r\n\tdefaultData: [\r\n\t\t{ id: 0, value: \"You can begin with inserting a new item\", checked: false },\t\r\n\t\t{ id: 1, value: \"Or just delete this line :)\", checked: true },\r\n\t],\r\n\tfirebase: {\r\n\t\tapiKey: \"AIzaSyDMwPEwZczMTTnZk32khspKQsFzhZa4Y0I\",\r\n\t\tauthDomain: \"react-todos-7f61d.firebaseapp.com\",\r\n\t\tdatabaseURL: \"https://react-todos-7f61d.firebaseio.com\",\r\n\t\tprojectId: \"react-todos-7f61d\",\r\n\t\tstorageBucket: \"\",\r\n\t\tmessagingSenderId: \"537322359882\",\r\n\t\tappId: \"1:537322359882:web:714c65b1ad0c75dec66ab3\"\r\n\t}\t\r\n};\r\n\r\nexport default config;","import React, { Component } from \"react\";\nimport arrayMove from \"array-move\";\nimport Navbar from \"./components/navbar.jsx\";\nimport Form from \"./components/form.jsx\";\nimport TodoList from \"./components/todo-list.jsx\";\nimport config from \"./config\";\nimport withFirebaseAuth from \"react-with-firebase-auth\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\n// main app class\nclass App extends Component {\n\tstate = {\n\t\tappTitle: config.appTitle,\n\t\talert: false,\n\t\tisLoggedIn: false,\n\t\tfirestoreData: false,\n\t\ttodos: [],\n\t};\n\t\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\t\n\t\t// set the main ref\n\t\tconst db = firebaseApp.firestore();\n\t\tthis.todosRef = db.collection( 'todos' );\n\t}\n\t\n\tcomponentDidUpdate( prevProps, prevState ) {\t\t\n\t\t// if user has logged in to google\n\t\tif( prevProps.user !== this.props.user && this.props.user !== null ) {\n\t\t\tconst userKey = this.props.user.email;\n\t\t\tconst isLoggedIn = true;\n\t\t\tlet alert = false;\n\t\t\t\n\t\t\t// do loading\n\t\t\tthis.setState( { alert: config.loadingMessage } );\n\t\t\t\n\t\t\t// get the firestore data\n\t\t\tthis.todosRef.doc( userKey ).get().then( doc => {\n\t\t\t\tconst data = doc.data();\t\t\t\t\n\t\t\t\t\n\t\t\t\tif( typeof data !== \"undefined\" ) {\n\t\t\t\t\tconst todos = JSON.parse( data.content );\n\t\t\t\t\tconst firestoreData = data;\n\t\t\t\t\tthis.setState( { todos, alert, isLoggedIn, firestoreData } );\t\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// sync the existing todos if not empty\n\t\t\t\t\tif( this.state.todos.length === 0 ) {\n\t\t\t\t\t\talert = config.noDataMessage;\t\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tconst dataToInsert = JSON.stringify( this.state.todos );\n\t\t\t\t\t\tconst currentDate = this.getCurrentDate();\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.pushToFirestore( {\n\t\t\t\t\t\t\tcreatedAt: currentDate,\n\t\t\t\t\t\t\tupdatedAt: currentDate,\n\t\t\t\t\t\t\tcontent: dataToInsert,\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.setState( { alert, isLoggedIn } );\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t} )\n\t\t\t.catch( error => {\n\t\t\t\tthis.setState( { alert: config.errorFirebaseMessage } );\n\t\t\t} );\t\t\n\t\t}\n\t\t\n\t\t// if user has logged out from google\n\t\tif( prevProps.user !== this.props.user && this.props.user === null  ) {\n\t\t\tconst todos = config.defaultData;\n\t\t\tconst isLoggedIn = false;\n\t\t\tconst alert = false;\n\t\t\t\n\t\t\tthis.setState( { todos, isLoggedIn, alert } );\n\t\t}\n\t\t\n\t\t// if state todos has updated while user has logged in\n\t\tif( prevState.todos !== this.state.todos && this.state.isLoggedIn === true ) {\n\t\t\tconst dataToInsert = JSON.stringify( this.state.todos );\n\t\t\tconst currentDate = this.getCurrentDate();\n\t\t\tlet data = false;\n\t\t\tlet prevContent = false;\n\t\t\t\n\t\t\t// it has the firestore data or not\n\t\t\tif( this.state.firestoreData ) {\n\t\t\t\tprevContent = this.state.firestoreData.content;\n\t\t\t\tdata = {\n\t\t\t\t\tcreatedAt: this.state.firestoreData.createdAt,\n\t\t\t\t\tupdatedAt: currentDate,\n\t\t\t\t\tcontent: dataToInsert,\n\t\t\t\t};\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdata = {\n\t\t\t\t\tcreatedAt: currentDate,\n\t\t\t\t\tupdatedAt: currentDate,\n\t\t\t\t\tcontent: dataToInsert,\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\t// push to firestore \n\t\t\t// only IF the local and the cloud data is different\n\t\t\tif( data.content !== prevContent ) {\n\t\t\t\tthis.pushToFirestore( data );\n\t\t\t}\n\t\t}\n\t\t\n\t\t// do notification if currently has no todos\n\t\tif( prevState.todos !== this.state.todos && this.state.todos.length === 0 ) {\n\t\t\tthis.setState( { alert: config.noDataMessage } );\n\t\t}\n\t}\n\t\n\tpushToFirestore( data ) {\n\t\tthis.todosRef.doc( this.props.user.email ).set( data )\n\t\t\t.then(function() {\n\t\t\t\tconsole.log(\"Document successfully written!\");\n\t\t\t})\n\t\t\t.catch(function(error) {\n\t\t\t\tconsole.error(\"Error writing document: \", error);\n\t\t\t});\n\t}\n\t\n\tgetCurrentDate() {\n\t\tvar currentDate = new Date();\n\t\tvar date = currentDate.getDate();\n\t\tvar month = currentDate.getMonth(); //Be careful! January is 0 not 1\n\t\tvar year = currentDate.getFullYear();\n\n\t\treturn date + \"-\" +(month + 1) + \"-\" + year;\n\t}\n\t\n\thandleInsert( dataToHandle ) {\n\t\t// must be contains any string\n\t\tif( dataToHandle !== '' ) {\n\t\t\tconst newId = this.generateRamdomId( this.state.todos );\n\t\t\tconst newData = [ { id: newId, value: dataToHandle, checked: false } ];\n\t\t\tconst todos = newData.concat( this.state.todos );\n\t\t\tconst alert = false;\n\t\t\tthis.setState( { todos, alert } );\n\t\t}\n\t\telse {\n\t\t\tthis.setState( { alert: \"The item can't be empty, please insert the new one!\" } );\n\t\t}\t\n\t}\n\t\n\thandleDelete( indexToHandle ) {\n\t\tconst todos = this.state.todos.filter( ( item, index ) => index !== indexToHandle );\n\t\tthis.setState( { todos } );\n\t}\n\t\n\thandleCheck( indexToHandle, statusAfterClick ) {\n\t\tconst todos = [ ...this.state.todos ];\n\t\tconst value = todos[ indexToHandle ].value;\n\t\ttodos[ indexToHandle ] = { value: value, checked: statusAfterClick };\n\t\tthis.setState( { todos } );\n\t}\n\t\n\thandleSort( sortedAttributes ) {\n\t\tconst oldIndex = sortedAttributes.oldIndex;\n\t\tconst newIndex = sortedAttributes.newIndex;\n\t\tconst todos = arrayMove( this.state.todos, oldIndex, newIndex );\n\t\tthis.setState( { todos } );\n\t}\n\t\n\tgenerateRamdomId( data ) {\n\t\tconst id = '_' + Math.random().toString(36).substr(2, 9);\n\t\tconst checkData = data.filter( item => id === item.id );\n\t\tconst isUnique = checkData.length === 0 ? true : false;\n\t\t\n\t\t// return the id or do search again\n\t\treturn isUnique ? id : this.generateRamdomId( data );\n\t}\n\t\n\trender() {\n\t\tconst appTitle = this.state.appTitle;\n\t\tconst { user, signInWithGoogle, signOut } = this.props;\n\t\t\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Navbar \n\t\t\t\t\tappTitle = { appTitle } \n\t\t\t\t\tuser = { user } \n\t\t\t\t\tsignInWithGoogle = { signInWithGoogle } \n\t\t\t\t\tsignOut = { signOut } \n\t\t\t\t/>\n\t\t\t\t<div className=\"container my-3\">\n\t\t\t\t\t<div className=\"col-md-8 offset-md-2\">\n\t\t\t\t\t\t<Form \n\t\t\t\t\t\t\tapp = { this }\n\t\t\t\t\t\t\tonInsert = { this.handleInsert } \n\t\t\t\t\t\t\talert = { this.state.alert }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TodoList \n\t\t\t\t\t\t\tapp = { this }\n\t\t\t\t\t\t\ttodos={ this.state.todos } \n\t\t\t\t\t\t\tonDelete = { this.handleDelete }\n\t\t\t\t\t\t\tonCheck = { this.handleCheck }\t\n\t\t\t\t\t\t\tonSort = { this.handleSort }\n\t\t\t\t\t\t/>\t\t\t\t\t\t\n\t\t\t\t\t</div>\t  \n\t\t\t\t</div>\n\t\t\t</React.Fragment>\t\n\t\t);\n\t}\n}\n\n// init the firebase\nconst firebaseApp = firebase.initializeApp( config.firebase );\nconst firebaseAppAuth = firebaseApp.auth();\nconst providers = {\tgoogleProvider: new firebase.auth.GoogleAuthProvider() };\n\n// export with firebase auth\nexport default withFirebaseAuth( { providers, firebaseAppAuth } ) ( App );","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from './app.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />, document.getElementById( 'root' ) );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}